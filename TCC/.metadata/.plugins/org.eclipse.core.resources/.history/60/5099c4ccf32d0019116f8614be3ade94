package com.java.socket;

import java.util.Date;

public class Subscription {
	
	String msg = "{\n" + 
			"  \"description\": \"A subscription to get info about Room1\",\n" + 
			"  \"subject\": {\n" + 
			"    \"entities\": [\n" + 
			"      {\n" + 
			"        \"id\": \"Room1\",\n" + 
			"        \"type\": \"Room\"\n" + 
			"      }\n" + 
			"    ],\n" + 
			"    \"condition\": {\n" + 
			"      \"attrs\": [\n" + 
			"        \"pressure\"\n" + 
			"      ]\n" + 
			"    }\n" + 
			"  },\n" + 
			"  \"notification\": {\n" + 
			"    \"http\": {\n" + 
			"      \"url\": \"http://172.18.1.1:"+ "PPPOOOOORRRTTTT" +"/\"\n" + 
			"    },\n" + 
			"    \"attrs\": [\n" + 
			"      \"temperature\"\n" + 
			"    ]\n" + 
			"  },\n" + 
			"  \"expires\": \"2040-01-01T14:00:00.00Z\",\n" + 
			"  \"throttling\": 5\n" + 
			"}";
	
	private String description;  //optional (max length 1024)
	private Date expires; //optional (must be a date or empty string "")
	private String throttling; //Minimal period of time in seconds which must elapse between two consecutive notifications. It is optional (must be an integer)
	
	
	
	public class Subject{
		
		private Entities[] entities;
		
		
		public class Entities {
			
			private String id;  //id or idPattern: one of them is mandatory (but both at the same time is not allowed). 
								//id must follow NGSIv2 restrictions for IDs. idPattern must be not empty and a valid regex.
			
			private String type; //type or typePattern: optional (but both at the same time is not allowed). type must 
								 //follow NGSIv2 restrictions for IDs. type must not be empty. typePattern must be a valid regex, and non-empty.
			
		}
		
		public class Condition{
			private String[] attrs;
			
			/*
			 * condition: optional (but if present it must have a content, i.e. {} is not allowed)

    				attrs: optional (but if present it must be a list; empty list is allowed)
    						expression: optional (but if present it must have a content, i.e. {} is not allowed)
        					q: optional (but if present it must be not empty, i.e. "" is not allowed)
        					mq: optional (but if present it must be not empty, i.e. "" is not allowed)
        					georel: optional (but if present it must be not empty, i.e. "" is not allowed)
        					geometry: optional (but if present it must be not empty, i.e. "" is not allowed)
        					coords: optional (but if present it must be not empty, i.e. "" is not allowed)

			 */
		}
		
	}
	
	public class Notification{
		private Http http;
		private Attrs attrs;
		
		/*
		 * 
    http: must be present if httpCustom is omitted, forbidden otherwise
        url: mandatory (must be a valid URL)
    httpCustom: must be present if http is omitted, forbidden otherwise
        url: mandatory (must be not empty)
        headers: optional (but if present it must have a content, i.e. {} is not allowed)
        qs: optional (but if present it must have a content, i.e. {} is not allowed)
        method: optional (but if present it must be a valid HTTP method)
        payload: optional (empty string is allowed)
    attrs: optional (but if present it must be a list; empty list is allowed)
    metadata: optional (but if present it must be a list; empty list is allowed)
    exceptAttrs: optional (but it cannot be present if attrs is also used; if present it must be a non-empty list)
    attrsFormat: optional (but if present it must be a valid attrs format keyword)

		 */
		public class Http{
			private String url;
			/*
			 * http: must be present if httpCustom is omitted, forbidden otherwise
    					url: mandatory (must be a valid URL)
			 */
		}
		
		public class Attrs{
			private String[] attrs;
		}
	}

}
